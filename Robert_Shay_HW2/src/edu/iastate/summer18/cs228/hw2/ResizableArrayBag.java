package edu.iastate.summer18.cs228.hw2;import java.util.Arrays;/** * A class that implements a bag of objects by using an array. The bag is never * full. *  * @author Robert Shay * @author Frank M. Carrano * @version 4.0 */public final class ResizableArrayBag<T> implements BagInterface<T> {	private T[] bag; // Cannot be final due to doubling	private int numberOfEntries;	private boolean initialized = false;	private static final int DEFAULT_CAPACITY = 25; // Initial capacity of bag	private static final int MAX_CAPACITY = 10000;	/** Creates an empty bag whose initial capacity is 25. */	public ResizableArrayBag() {		this(DEFAULT_CAPACITY);	} // end default constructor	/**	 * Creates an empty bag having a given initial capacity.	 * 	 * @param initialCapacity	 *            The integer capacity desired.	 */	public ResizableArrayBag(int initialCapacity) {		checkCapacity(initialCapacity);		// The cast is safe because the new array contains null entries		@SuppressWarnings("unchecked")		T[] tempBag = (T[]) new Object[initialCapacity]; // Unchecked cast		bag = tempBag;		numberOfEntries = 0;		initialized = true;	} // end constructor	/**	 * Creates a bag containing given entries.	 * 	 * @param contents	 *            An array of objects.	 */	public ResizableArrayBag(T[] contents) {		checkCapacity(contents.length);		bag = Arrays.copyOf(contents, contents.length);		numberOfEntries = contents.length;		initialized = true;	} // end constructor	/**	 * Adds a new entry to this bag.	 * 	 * @param newEntry	 *            The object to be added as a new entry.	 * @return True.	 */	public boolean add(T newEntry) {		checkInitialization();		if (isArrayFull()) {			doubleCapacity();		} // end if		bag[numberOfEntries] = newEntry;		numberOfEntries++;		return true;	} // end add	/**	 * Retrieves all entries that are in this bag.	 * 	 * @return A newly allocated array of all the entries in this bag.	 */	public T[] toArray() {		checkInitialization();		// The cast is safe because the new array contains null entries.		@SuppressWarnings("unchecked")		T[] result = (T[]) new Object[numberOfEntries]; // Unchecked cast		for (int index = 0; index < numberOfEntries; index++) {			result[index] = bag[index];		} // end for		return result;	} // end toArray	/**	 * Sees whether this bag is empty.	 * 	 * @return True if this bag is empty, or false if not.	 */	public boolean isEmpty() {		return numberOfEntries == 0;	} // end isEmpty	/**	 * Gets the current number of entries in this bag.	 * 	 * @return The integer number of entries currently in this bag.	 */	public int getCurrentSize() {		return numberOfEntries;	} // end getCurrentSize	/**	 * Counts the number of times a given entry appears in this bag.	 * 	 * @param anEntry	 *            The entry to be counted.	 * @return The number of times anEntry appears in this ba.	 */	public int getFrequencyOf(T anEntry) {		checkInitialization();		int counter = 0;		for (int index = 0; index < numberOfEntries; index++) {			if (anEntry.equals(bag[index])) {				counter++;			} // end if		} // end for		return counter;	} // end getFrequencyOf	/**	 * Tests whether this bag contains a given entry.	 * 	 * @param anEntry	 *            The entry to locate.	 * @return True if this bag contains anEntry, or false otherwise.	 */	public boolean contains(T anEntry) {		checkInitialization();		return getIndexOf(anEntry) > -1; // or >= 0	} // end contains	/** Removes all entries from this bag. */	public void clear() {		while (!isEmpty())			remove();		reduceArray();	} // end clear	/**	 * Removes one unspecified entry from this bag, if possible.	 * 	 * @return Either the removed entry, if the removal was successful, or null.	 */	public T remove() {		checkInitialization();		T result = removeEntry(numberOfEntries - 1);		reduceArray();		return result;	} // end remove	/**	 * Removes one occurrence of a given entry from this bag.	 * 	 * @param anEntry	 *            The entry to be removed.	 * @return True if the removal was successful, or false if not.	 */	public boolean remove(T anEntry) {		checkInitialization();		int index = getIndexOf(anEntry);		T result = removeEntry(index);		reduceArray();		return anEntry.equals(result);	} // end remove	// Locates a given entry within the array bag.	// Returns the index of the entry, if located,	// or -1 otherwise.	// Precondition: checkInitialization has been called.	private int getIndexOf(T anEntry) {		int where = -1;		boolean found = false;		int index = 0;		while (!found && (index < numberOfEntries)) {			if (anEntry.equals(bag[index])) {				found = true;				where = index;			} // end if			index++;		} // end while		// Assertion: If where > -1, anEntry is in the array bag, and it		// equals bag[where]; otherwise, anEntry is not in the array.		return where;	} // end getIndexOf	// Removes and returns the entry at a given index within the array.	// If no such entry exists, returns null.	// Precondition: 0 <= givenIndex < numberOfEntries.	// Precondition: checkInitialization has been called.	private T removeEntry(int givenIndex) {		T result = null;		if (!isEmpty() && (givenIndex >= 0)) {			result = bag[givenIndex]; // Entry to remove			int lastIndex = numberOfEntries - 1;			bag[givenIndex] = bag[lastIndex]; // Replace entry to remove with last entry			bag[lastIndex] = null; // Remove reference to last entry			numberOfEntries--;		} // end if		reduceArray();		return result;	} // end removeEntry	// Returns true if the array bag is full, or false if not.	private boolean isArrayFull() {		return numberOfEntries >= bag.length;	} // end isArrayFull	// Doubles the size of the array bag.	// Precondition: checkInitialization has been called.	private void doubleCapacity() {		int newLength = 2 * bag.length;		checkCapacity(newLength);		bag = Arrays.copyOf(bag, newLength);	} // end doubleCapacity	// Throws an exception if the client requests a capacity that is too large.	private void checkCapacity(int capacity) {		if (capacity > MAX_CAPACITY) throw new IllegalStateException(				"Attempt to create a bag whose capacity exceeds " + "allowed maximum of " + MAX_CAPACITY);	} // end checkCapacity	// Throws an exception if receiving object is not initialized.	private void checkInitialization() {		if (!initialized) throw new SecurityException("Uninitialized object used " + "to call an ArrayBag method.");	} // end checkInitialization	@Override	public BagInterface<T> union(BagInterface<T> anotherBag) {		BagInterface<T> returned = copy(anotherBag);		for (int i = 0; i < bag.length; i++) {			returned.add(bag[i]);		}		return returned;	}	@Override	public BagInterface<T> intersection(BagInterface<T> anotherBag) {		ResizableArrayBag<T> copy = copy(anotherBag);		BagInterface<T> returned = new ResizableArrayBag<>();		for (int i = 0; i < numberOfEntries; i++) {			if (copy.contains(bag[i])) {				returned.add(bag[i]);				copy.remove(bag[i]);			}		}		return returned;	}	@Override	public BagInterface<T> difference(BagInterface<T> anotherBag) {		ResizableArrayBag<T> copy = copy(anotherBag);		BagInterface<T> returned = new ResizableArrayBag<>();		for (int i = 0; i < bag.length; i++) {			if (bag[i] != null) {				if (!copy.contains(bag[i])) {					returned.add(bag[i]);				}				copy.remove(bag[i]);			}		}		return returned;	}	/**	 * Replaces a object in the ResizableArrayBag with the inputed object. The	 * object can be anything of the same type.	 * 	 * @param replacement	 *            Object that is replacing.	 * @return Returns the object that is removed.	 */	public T replace(T replacement) {		T temp = remove();		add(replacement);		return temp;	}	/**	 * Removes all occurences of the inputed object.	 * 	 * @param anEntry	 *            Object type that is being removed from the ResizableArrayBag.	 */	public void removeEntry(T anEntry) {		while (contains(anEntry)) {			remove(anEntry);		}		reduceArray();	}	/**	 * This method works the same as the equals method from the Object class. If the	 * inputed BagInterface contains the same frequency of each object as the	 * current one does, it returns true. The order does not matter.	 * 	 * @param o	 *            Inputed BagInterface that is being compared.	 * @return True if equals, false if not.	 */	public boolean equals(BagInterface<T> o) {		boolean yee = true;		for (int i = 0; i < numberOfEntries; i++) {			if (getFrequencyOf(bag[i]) != o.getFrequencyOf(bag[i])) yee = false;		}		return yee;	}	/**	 * Checks to see if the size of the current bag is too big. The bag is too big	 * if the number of entries is less than half the capacity.	 * 	 * @return True if the bag is too big, false if not.	 */	private boolean isTooBig() {		return bag.length > 20 && numberOfEntries < (bag.length / 2);	}	/**	 * Reduces the size of the bag if it is too big. This method refers to the	 * isTooBig() method to determine whether the bag is too big. The bag is reduced	 * by 1/4 of it's current size until it is no longer too big.	 */	private void reduceArray() {		// Loops until the current bag is the correct size.		if (isTooBig()) {			bag = Arrays.copyOf(bag, bag.length - (int) (bag.length / 4));		}	}	/**	 * Creates a copy of the inputed BagInterface to a new LinkedBag.	 * 	 * @param aBag	 *            Bag that is being copied.	 * @return A new LinkedBag.	 */	private ResizableArrayBag<T> copy(BagInterface<T> aBag) {		T[] arr = aBag.toArray();		ResizableArrayBag<T> returned = new ResizableArrayBag<>();		for (int i = 0; i < aBag.getCurrentSize(); i++)			if (arr[i] != null) returned.add(arr[i]);		return returned;	}} // end ResizableArrayBag