package edu.iastate.summer18.cs228.hw2;/** * An interface that describes the operations of a bag of objects. *  * @author Robert Shay * @author Frank M. Carrano * @version 4.0 */public interface BagInterface<T> {	/**	 * Gets the current number of entries in this bag.	 * 	 * @return The integer number of entries currently in the bag.	 */	public int getCurrentSize();	/**	 * Sees whether this bag is empty.	 * 	 * @return True if the bag is empty, or false if not.	 */	public boolean isEmpty();	/**	 * Adds a new entry to this bag.	 * 	 * @param newEntry	 *            The object to be added as a new entry.	 * @return True if the addition is successful, or false if not.	 */	public boolean add(T newEntry);	/**	 * Removes one unspecified entry from this bag, if possible.	 * 	 * @return Either the removed entry, if the removal. was successful, or null.	 */	public T remove();	/**	 * Removes one occurrence of a given entry from this bag.	 * 	 * @param anEntry	 *            The entry to be removed.	 * @return True if the removal was successful, or false if not.	 */	public boolean remove(T anEntry);	/** Removes all entries from this bag. */	public void clear();	/**	 * Counts the number of times a given entry appears in this bag.	 * 	 * @param anEntry	 *            The entry to be counted.	 * @return The number of times anEntry appears in the bag.	 */	public int getFrequencyOf(T anEntry);	/**	 * Tests whether this bag contains a given entry.	 * 	 * @param anEntry	 *            The entry to locate.	 * @return True if the bag contains anEntry, or false if not.	 */	public boolean contains(T anEntry);	/**	 * Retrieves all entries that are in this bag.	 * 	 * @return A newly allocated array of all the entries in the bag. Note: If the	 *         bag is empty, the returned array is empty.	 */	public T[] toArray();	/**	 * Adds the current bag to another bag. The returned BagInterface can have	 * duplicate objects.	 * 	 * @param anotherBag	 *            The bag that is being added too the current one.	 * @return A BagInterface<T> of the combined bags.	 */	public BagInterface<T> union(BagInterface<T> anotherBag);	/**	 * Finds the objects that the current bag has in common with the inputed one	 * then returns them in a BagInterface<T>. If both bags have multiple of a	 * object, the object will get added until one bag does not have anymore.	 * 	 * @param anotherBag	 *            The bag that is being compared too.	 * @return A BagInterface<T> of the in common objects.	 */	public BagInterface<T> intersection(BagInterface<T> anotherBag);	/**	 * Removes all of the objects that the current bag has in common with the	 * inputed bag. If they have multiple of one object in common, then the number	 * they have in common will be removed.	 * 	 * @param anotherBag	 *            The bag that is being compared too.	 * @return A BagInterface<T> of the left over objects.	 */	public BagInterface<T> difference(BagInterface<T> anotherBag);} // end BagInterface